---
// No server-side JavaScript needed for now
---

<div class="theme-switcher-container">
  <button id="theme-toggle-btn" aria-label="Toggle theme options" aria-expanded="false">
    <span id="current-theme-icon">
      <!-- Default dark theme icon -->
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor" aria-hidden="true">
        <path d="M10 2c-1.82 0-3.53.5-5 1.35C7.99 5.08 10 8.3 10 12s-2.01 6.92-5 8.65C6.47 21.5 8.18 22 10 22c5.52 0 10-4.48 10-10S15.52 2 10 2z"/>
      </svg>
    </span>
    <svg class="dropdown-arrow" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="16" height="16" fill="currentColor">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
  </button>
  
  <div id="theme-dropdown" class="theme-dropdown hidden">
    <button data-theme="light" class="theme-option">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor" aria-hidden="true">
        <path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM12 15c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm0-10C6.48 5 2 9.48 2 15h2c0-4.41 3.59-8 8-8s8 3.59 8 8h2c0-5.52-4.48-10-10-10z"/>
      </svg>
      Light
    </button>
    <button data-theme="dark" class="theme-option">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor" aria-hidden="true">
        <path d="M10 2c-1.82 0-3.53.5-5 1.35C7.99 5.08 10 8.3 10 12s-2.01 6.92-5 8.65C6.47 21.5 8.18 22 10 22c5.52 0 10-4.48 10-10S15.52 2 10 2z"/>
      </svg>
      Dark
    </button>
  </div>
</div>

<style>
  .theme-switcher-container {
    position: relative;
    display: inline-block;
  }

  #theme-toggle-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    border: 1px solid #d1d5db;
    font-weight: 500;
    color: #374151;
    background-color: #ffffff;
    cursor: pointer;
    transition: all 0.15s ease-in-out;
  }

  #theme-toggle-btn:hover {
    background-color: #f9fafb;
    border-color: #9ca3af;
  }

  #theme-toggle-btn:focus {
    outline: 2px solid #6366e6;
    outline-offset: 2px;
  }

  .dropdown-arrow {
    transition: transform 0.15s ease-in-out;
  }

  #theme-toggle-btn[aria-expanded="true"] .dropdown-arrow {
    transform: rotate(180deg);
  }

  .theme-dropdown {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    margin-top: 0.25rem;
    background-color: #ffffff;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    z-index: 50;
    min-width: max-content;
  }

  .theme-dropdown.hidden {
    display: none;
  }

  .theme-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    width: 100%;
    padding: 0.75rem 1rem;
    border: none;
    background: none;
    color: #374151;
    cursor: pointer;
    transition: background-color 0.15s ease-in-out;
    font-size: 0.875rem;
  }

  .theme-option:hover {
    background-color: #f3f4f6;
  }

  .theme-option:focus {
    outline: none;
    background-color: #e5e7eb;
  }

  .theme-option:first-child {
    border-radius: 0.375rem 0.375rem 0 0;
  }

  .theme-option:last-child {
    border-radius: 0 0 0.375rem 0.375rem;
  }

  /* Dark mode styles */
  .dark #theme-toggle-btn {
    color: #d1d5db;
    background-color: #374151;
    border-color: #4b5563;
  }

  .dark #theme-toggle-btn:hover {
    background-color: #4b5563;
    border-color: #6b7280;
  }

  .dark .theme-dropdown {
    background-color: #374151;
    border-color: #4b5563;
  }

  .dark .theme-option {
    color: #d1d5db;
  }

  .dark .theme-option:hover {
    background-color: #4b5563;
  }

  .dark .theme-option:focus {
    background-color: #6b7280;
  }
</style>

<script>
  const themeToggleBtn = document.getElementById('theme-toggle-btn');
  const themeDropdown = document.getElementById('theme-dropdown');
  const currentThemeIcon = document.getElementById('current-theme-icon');
  const themeOptions = document.querySelectorAll('.theme-option');

  const icons = {
    light: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor" aria-hidden="true">
      <path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zM12 15c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm0-10C6.48 5 2 9.48 2 15h2c0-4.41 3.59-8 8-8s8 3.59 8 8h2c0-5.52-4.48-10-10-10z"/>
    </svg>`,
    dark: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor" aria-hidden="true">
      <path d="M10 2c-1.82 0-3.53.5-5 1.35C7.99 5.08 10 8.3 10 12s-2.01 6.92-5 8.65C6.47 21.5 8.18 22 10 22c5.52 0 10-4.48 10-10S15.52 2 10 2z"/>
    </svg>`
  };

  const updateThemeIcon = (theme) => {
    currentThemeIcon.innerHTML = icons[theme] || icons.dark;
  };

  const applyTheme = (theme) => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
      updateThemeIcon('dark');
    } else { // light
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
      updateThemeIcon('light');
    }
  };

  const toggleDropdown = () => {
    const isExpanded = themeToggleBtn.getAttribute('aria-expanded') === 'true';
    themeToggleBtn.setAttribute('aria-expanded', !isExpanded);
    themeDropdown.classList.toggle('hidden');
  };

  const closeDropdown = () => {
    themeToggleBtn.setAttribute('aria-expanded', 'false');
    themeDropdown.classList.add('hidden');
  };

  // Initialize theme on load - default to dark
  const storedTheme = localStorage.getItem('theme');

  if (storedTheme) {
    applyTheme(storedTheme);
  } else {
    applyTheme('dark');
  }

  // Event listeners
  themeToggleBtn.addEventListener('click', toggleDropdown);

  themeOptions.forEach(option => {
    option.addEventListener('click', (e) => {
      const theme = e.currentTarget.getAttribute('data-theme');
      applyTheme(theme);
      closeDropdown();
    });
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!themeToggleBtn.contains(e.target) && !themeDropdown.contains(e.target)) {
      closeDropdown();
    }
  });

  // Close dropdown on Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeDropdown();
    }
  });
</script>
